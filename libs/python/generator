#! /usr/bin/env python
from helperGenerator import fetchEntitledServiceList, renderTemplateWithJson
from pathlib import Path
import os


#######################################################################################
# Setup file paths
#######################################################################################
CONFIG_FOLDER = "config"
BASE_FOLDER = "btp-base"
BTP_BASE_VERSION = "v0"
METADATA_SOURCE_FOLDER = "developer"

if os.environ.get("METADATA_TARGET_CONFIG_FOLDER"):
    CONFIG_FOLDER = os.environ.get("METADATA_TARGET_CONFIG_FOLDER")

if os.environ.get("METADATA_TARGET_BASE_FOLDER"):
    BASE_FOLDER = os.environ.get("METADATA_TARGET_BASE_FOLDER")

if os.environ.get("METADATA_VERSION"):
    BTP_BASE_VERSION = os.environ.get("METADATA_VERSION")

if os.environ.get("METADATA_SOURCE_FOLDER"):
    METADATA_SOURCE_FOLDER = os.environ.get("METADATA_SOURCE_FOLDER")          

ROOT = Path(__file__, "..", "..", "..").resolve()
BTP_BASE = Path(ROOT, CONFIG_FOLDER, BASE_FOLDER).resolve()
SERVICE_METADATA_FOLDER = Path(BTP_BASE, BTP_BASE_VERSION, METADATA_SOURCE_FOLDER).resolve()

#######################################################################################
# Fetch the BTP service list
#######################################################################################
print("Fetching service information from " + str(SERVICE_METADATA_FOLDER))
allMetadata = fetchEntitledServiceList(SERVICE_METADATA_FOLDER)

#######################################################################################
# Generate all files
#######################################################################################

if os.environ.get("IS_EXECUTED_BY_GHACTION") == "active":
    print("INFO: Execution via GitHub Action")
    targetFilename = Path(__file__, "..", "..", "btpsa-parameters.json").resolve()
    templateFile = Path(__file__, "..", "..", "..", "config", "templates", "libs", "BTPSA-PARAMETERS.json").resolve()
else:
    targetFilename = Path(__file__, "libs", "btpsa-parameters.json").resolve()
    templateFile =   Path(__file__, "config", "templates", "libs", "BTPSA-PARAMETERS.json").resolve()
    
print("INFO: start generation on template file >" + str(templateFile) + "< and created the target file >" + str(targetFilename) + "<")
renderTemplateWithJson(templateFile, targetFilename, allMetadata)
print("INFO: applied SAP BTP service list on template file >" + str(templateFile) + "< and created the target file >" + str(targetFilename) + "<")

targetFilename = "./libs/btpsa-usecase.json"
templateFile = "./config/templates/libs/BTPSA-USECASE.json"

if os.environ.get("IS_EXECUTED_BY_GHACTION")  == "active":
    targetFilename = Path(__file__, "..", "..", "btpsa-usecase.json").resolve()
    templateFile = Path(__file__, "..", "..", "..", "config", "templates", "libs", "BTPSA-USECASE.json").resolve()
else:
    targetFilename = Path(__file__, "libs", "btpsa-usecase.json").resolve()
    templateFile = Path(__file__, "config", "templates", "libs", "BTPSA-USECASE.json").resolve()

print("INFO: start generation on template file >" + str(templateFile) + "< and created the target file >" + str(targetFilename) + "<")
renderTemplateWithJson(templateFile, targetFilename, allMetadata)
print("INFO: applied SAP BTP service list on template file >" + str(templateFile) + "< and created the target file >" + str(targetFilename) + "<")
